<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Chrizy-zjw.github.io</id>
    <title>Chrizy-zjw</title>
    <updated>2020-07-26T01:50:45.298Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Chrizy-zjw.github.io"/>
    <link rel="self" href="https://Chrizy-zjw.github.io/atom.xml"/>
    <subtitle>I think therefore I AM</subtitle>
    <logo>https://Chrizy-zjw.github.io/images/avatar.png</logo>
    <icon>https://Chrizy-zjw.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Chrizy-zjw</rights>
    <entry>
        <title type="html"><![CDATA[最短路径Floyed]]></title>
        <id>https://Chrizy-zjw.github.io/post/1jskdODXs/</id>
        <link href="https://Chrizy-zjw.github.io/post/1jskdODXs/">
        </link>
        <updated>2020-07-26T01:43:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="最短路径算法floyed算法">最短路径算法（Floyed算法）</h1>
<h3 id="floyed算法">Floyed算法</h3>
<p>优点是极其暴力简单且适用于出现负权边的情况，缺点是时间复杂度很高。</p>
<h3 id="算法详解">算法详解</h3>
<ol>
<li>对角线先赋成0因为自己到自己的最短路径为0</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">1</th>
<th style="text-align:right">2</th>
<th style="text-align:right">3</th>
<th style="text-align:right">4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">0</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right"></td>
<td style="text-align:right">0</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
<td style="text-align:right">0</td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
<td style="text-align:right"></td>
<td style="text-align:right">0</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>按题目条件输入</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">1</th>
<th style="text-align:right">2</th>
<th style="text-align:right">3</th>
<th style="text-align:right">4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">0</td>
<td style="text-align:right">2</td>
<td style="text-align:right">6</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">∞</td>
<td style="text-align:right">0</td>
<td style="text-align:right">3</td>
<td style="text-align:right">∞</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">7</td>
<td style="text-align:right">∞</td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right">5</td>
<td style="text-align:right">∞</td>
<td style="text-align:right">12</td>
<td style="text-align:right">0</td>
</tr>
</tbody>
</table>
<p>3.Floyed算法<br>
当k=1时即通过点1来中转。判断dis[1][i]+dis[j][1]是否比dis[i][j]小就行。如图dis[3][2]转换dis[1][2]+dis[3][1]</p>
<table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">1</th>
<th style="text-align:right">2</th>
<th style="text-align:right">3</th>
<th style="text-align:right">4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">0</td>
<td style="text-align:right"><strong>2</strong></td>
<td style="text-align:right">6</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">∞</td>
<td style="text-align:right">0</td>
<td style="text-align:right">3</td>
<td style="text-align:right">∞</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right"><strong>7</strong></td>
<td style="text-align:right"><strong>9</strong></td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right">5</td>
<td style="text-align:right">∞</td>
<td style="text-align:right">12</td>
<td style="text-align:right">0</td>
</tr>
</tbody>
</table>
<p>只通过1来中转的结果</p>
<table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">1</th>
<th style="text-align:right">2</th>
<th style="text-align:right">3</th>
<th style="text-align:right">4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">0</td>
<td style="text-align:right">2</td>
<td style="text-align:right">6</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">∞</td>
<td style="text-align:right">0</td>
<td style="text-align:right">3</td>
<td style="text-align:right">∞</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">7</td>
<td style="text-align:right"><strong>9</strong></td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right">5</td>
<td style="text-align:right"><strong>7</strong></td>
<td style="text-align:right"><strong>11</strong></td>
<td style="text-align:right">0</td>
</tr>
</tbody>
</table>
<p>当k=n（4）时</p>
<table>
<thead>
<tr>
<th style="text-align:right"></th>
<th style="text-align:right">1</th>
<th style="text-align:right">2</th>
<th style="text-align:right">3</th>
<th style="text-align:right">4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">0</td>
<td style="text-align:right">2</td>
<td style="text-align:right">5</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">9</td>
<td style="text-align:right">0</td>
<td style="text-align:right">3</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">6</td>
<td style="text-align:right">8</td>
<td style="text-align:right">0</td>
<td style="text-align:right">1</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right">5</td>
<td style="text-align:right">7</td>
<td style="text-align:right">10</td>
<td style="text-align:right">0</td>
</tr>
</tbody>
</table>
<p>就像这样每一次循环更新以此结果当k〉n时结束</p>
<h3 id="代码部分">代码部分</h3>
<ol>
<li>初始化</li>
</ol>
<pre><code class="language-cpp">dis[u][v]=w[u][v]//有边相接时，最短路径默认为权值
dis[u][v]=0x7ffffff//无边相接时，赋值无穷大
</code></pre>
<p>2.算法核心</p>
<pre><code class="language-cpp">for（int k=1;k&lt;=n;k++)//循环从i-j个点前k个点的最短路径
   for(int i=1;i&lt;=n;i++)
     for(int j=1;j&lt;=n;j++）
     {
        if（dis[i][j]&gt;dis[i][k]+dis[k][j])//松弛语句
           dis[i][j]=disi][k]+dis[k][j];
     }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最短路径Bellman-Ford]]></title>
        <id>https://Chrizy-zjw.github.io/post/brFNSnPUT/</id>
        <link href="https://Chrizy-zjw.github.io/post/brFNSnPUT/">
        </link>
        <updated>2020-07-26T01:43:08.000Z</updated>
        <content type="html"><![CDATA[<p>这个算法通过边的松弛来做即判断dis[u[i]]+w[i]是否比dis[v[i]]小。代码如下。</p>
<pre><code class="language-cpp">for(int k=1;k&lt;=n-1;k++)//外循环循环n-1次（n表示点的个数）原因是不能出现负权回路
  for(int i=1;i&lt;=m;i++)//内循环循环m次（m表示边的个数）
     if(dis[v[i]]&gt;dis[u[i]]+w[i])//松弛语句
        dis[v[i]]=dis[u[i]]+w[i];
</code></pre>
<p>完整代码</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
int main()
{
	int dis[1000],u[1000],v[1000],w[1000];//dis数组表示最短路，u数组表示起点，v数组表示终点，w数组表示u到v的边的权值 
	int n,m;
	int inf=0x7ffff;//无穷大 
	cin&gt;&gt;n&gt;&gt;m;
	for(int i=1;i&lt;=m;i++)
	{
		cin&gt;&gt;u[i]&gt;&gt;v[i]&gt;&gt;w[i];
	}
	for(int i=1;i&lt;=n;i++)
	dis[i]=inf;//将一号点到其余点的权值为无穷大 
	dis[1]=0;// 
	for(int k=1;k&lt;=n-1;k++)//外循环循环n-1次（n表示点的个数）原因是不能出现负权回路
    for(int i=1;i&lt;=m;i++)//内循环循环m次（m表示边的个数）
        if(dis[v[i]]&gt;dis[u[i]]+w[i])//松弛语句
        dis[v[i]]=dis[u[i]]+w[i];
    for(int i=1;i&lt;=n;i++)
    cout&lt;&lt;dis[i]&lt;&lt;' ';
    return 0;
}
</code></pre>
<p>Bellman-Ford算法还可以检测是否含有负权回路，因为我们知道负权回路是不存在最短路径的，所以在跑完一遍Bellman-Ford算法后再对每一条边做一次检测即可。代码如下。</p>
<pre><code>int vis=0;
for(int i=1;i&lt;=m;i++)
if(dis[v[i]]&gt;dis[u[i]]+w[i])
vis=1;
if(vis==1) cout&lt;&lt;&quot;有负权回路&quot;； 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最短路径SPFA算法]]></title>
        <id>https://Chrizy-zjw.github.io/post/DRnRC15Ym/</id>
        <link href="https://Chrizy-zjw.github.io/post/DRnRC15Ym/">
        </link>
        <updated>2020-07-26T01:42:26.000Z</updated>
        <content type="html"><![CDATA[<p>SPFA算法很快，时间复杂度为O（ke），适用于稀疏图带有负权边的图。主要通过<a href="https://blog.csdn.net/zbq_tt5/article/details/89681404">邻接表</a>和队列实现。<br>
代码</p>
<pre><code class="language-cpp">#include&lt;bits/stdc++.h&gt;
using namespace std;
const int N=1e5+10;
int n,m,h[N],e[N],ne[N],dist[N],w[N],idx;
bool st[N];
void add(int a,int b,int c)
{
	e[idx]=b;w[idx]=c;ne[idx]=h[a];h[a]=idx++;
}
void Spfa()
{
	memset(dist,0x3f,sizeof dist);
	dist[1]=0;
	queue&lt;int&gt; q;
	q.push(1);
	st[1]=true;
	while(!q.empty())
	{
		int t=q.front();
		q.pop();
		st[t]=false;
		for(int i=h[t];i!=-1;i=ne[i])
		{
			int j=e[i];
			if(dist[j]&gt;dist[t]+w[i])
			{
				dist[j]=dist[t]+w[i];
				if(!st[j])
				{
					q.push(j);
					st[j]=true;	
				}	
			}	
		}	
	}
}
int main()
{
	cin&gt;&gt;n&gt;&gt;m;
	memset(h,-1,sizeof h);
	while(m--)
	{
		int a,b,c;
		cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;
		add(a,b,c);
	}
	Spfa();
	if(dist[n]==0x3f3f3f3f) cout&lt;&lt;&quot;impossible&quot;;
	else cout&lt;&lt;dist[n];
	return 0;
}
————————————————
版权声明：本文为CSDN博主「user_qym」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/user_qym/java/article/details/104107107
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[并查集]]></title>
        <id>https://Chrizy-zjw.github.io/post/SqDPlsHCg/</id>
        <link href="https://Chrizy-zjw.github.io/post/SqDPlsHCg/">
        </link>
        <updated>2020-07-26T01:40:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="并查集是什么">并查集是什么？</h1>
<p>并查集是一种树型的数据结构，用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。常常在使用中以森林来表示。（语句源于<a href="https://baike.baidu.com/item/%E5%B9%B6%E6%9F%A5%E9%9B%86/9388442?fr=aladdin">度娘</a>）</p>
<hr>
<p>并查集顾名思义合并和查找的集合。<br>
<strong>合并</strong>将若干个有关联的数据合并到一个集合中。<br>
<strong>查找</strong>查找数据在哪一个集合中。</p>
<h2 id="运用代码实现">运用代码实现</h2>
<ol>
<li>初始化<br>
给一个father数组，令自己就是父亲，这句话很逗，当是对的，即各自都是分别的集合。代码如下。</li>
</ol>
<pre><code class="language-cpp">for(int i=1;i&lt;=n;i++)
	fa[i]=i;
</code></pre>
<ol start="2">
<li>查找<br>
求根也就是找父亲，但有些人就问了，求根不是树的内容吗？其实并查集也是树。我们在这写个函数。</li>
</ol>
<pre><code class="language-cpp">int find(int v)
{
	if(v==fa[v]) return v;//如果自己是自己的父亲就返回
	else return fa[v]=find(fa[v]);//路径压缩
}
</code></pre>
<ol start="3">
<li>合并<br>
输入两个数，如果他们的父亲不一样，合并他们。代码如下。</li>
</ol>
<pre><code class="language-cpp">void unionn(int u,int v)
{
	int re=find(u),ri=find(v);
	if(re!=ri) fa[re]=fa[ri];//如果父亲不一样合并。
}
</code></pre>
<ol start="4">
<li>判断<br>
判断两个数是否在一个集合中即判断两个数的父亲是否一样。代码如下。</li>
</ol>
<pre><code class="language-cpp">bool judge(int i,int j)
{
	int ri=find(i),re=find(j);
	if(ri==re) return true;
	return false;  
}
</code></pre>
<ol start="5">
<li>完整代码（参考<a href="https://www.luogu.com.cn/problem/P3367">[模板]并查集</a>）</li>
</ol>
<pre><code class="language-cpp">#include&lt;iostream&gt;
using namespace std;
int n,m;
int fa[10005];
int find(int v)
{
	if(v==fa[v]) return v;
	else return fa[v]=find(fa[v]);
}
void unionn(int u,int v)
{
	int re=find(u),ri=find(v);
	if(re!=ri) fa[re]=fa[ri];
}
bool judge(int i,int j)
{
	int ri=find(i),re=find(j);
	if(ri==re) return true;
	return false;  
}
int main()
{
	cin&gt;&gt;n&gt;&gt;m;
	for(int i=1;i&lt;=n;i++)
	fa[i]=i;
	for(int i=1;i&lt;=m;i++)
	{
		int zi,xi,yi;
		cin&gt;&gt;zi&gt;&gt;xi&gt;&gt;yi;
		if(zi==1) unionn(xi,yi);
		else if(!judge(xi,yi)) cout&lt;&lt;'N'&lt;&lt;endl;
		else cout&lt;&lt;'Y'&lt;&lt;endl; 
   }
	return 0;
 } 
</code></pre>
]]></content>
    </entry>
</feed>